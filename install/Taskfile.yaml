version: '3'

dotenv: ['.env']

tasks:
  # --- Setup and Pre-requisites ---
  setup:tools:
    desc: "Install necessary tools (gcloud, helm, go-task, kubectl, shellcheck)"
    cmds:
      - ./scripts/install_tools.sh

  setup:gcloud-config:
    desc: "Configure gcloud for the specified project and region/zone"
    cmds:
      - gcloud config set project {{.GCP_PROJECT_ID | default (env "GCP_PROJECT_ID")}}
      - gcloud config set compute/region {{.GCP_REGION | default (env "GCP_REGION")}}
      - gcloud config set compute/zone {{.GCP_ZONE | default (env "GCP_ZONE")}}
    vars:
      GCP_PROJECT_ID:
        sh: "echo Selecting project: $(gcloud config get-value project)"
      GCP_REGION:
        sh: "echo Selecting region: $(gcloud config get-value compute/region)"
      GCP_ZONE:
        sh: "echo Selecting zone: $(gcloud config get-value compute/zone)"

  # --- Infrastructure Bootstrap & Deployment ---
  infra:bootstrap-config-controller:
    desc: "Bootstrap the GCP Config Controller and setup Git Sync for infrastructure deployment."
    deps:
      - setup:gcloud-config
    cmds:
      - |
        echo "--> Running bootstrap_config_controller.sh..."
        ./scripts/bootstrap_config_controller.sh \
          --project-id "{{.GCP_PROJECT_ID | default (env "GCP_PROJECT_ID")}}" \
          --region "{{.GCP_REGION | default (env "GCP_REGION")}}" \
          --host-project-id "{{.GCP_HOST_PROJECT_ID | default (env "GCP_HOST_PROJECT_ID")}}" \
          --repo-url "{{.GIT_REPO_URL | default (env "GIT_REPO_URL")}}" \
          --repo-branch "{{.GIT_REPO_BRANCH | default (env "GIT_REPO_BRANCH")}}" \
          --gcp-billing-account-id "{{.GCP_BILLING_ACCOUNT_ID | default (env "GCP_BILLING_ACCOUNT_ID")}}"

  infra:lint-charts:
    desc: "Lints all Helm charts."
    cmds:
      - helm lint charts/*

  infra:template-charts:
    desc: "Generates templates for all Helm charts without deploying, for review."
    cmds:
      - for chart_dir in charts/*; do
          if [ -d "$chart_dir" ]; then
            echo "--- Templating $(basename $chart_dir) ---";
            helm template $(basename $chart_dir) $chart_dir --debug;
            echo "";
          fi;
        done

  infra:get-outputs:
    desc: "Retrieves critical outputs (GKE IP, LB IP, SQL connection) after infra deployment."
    deps:
      - setup:gcloud-config
    cmds:
      - ./scripts/generate_outputs.sh

  # --- Application Deployment (Managed by ArgoCD) ---
  app:deploy-argocd:
    desc: "Deploys ArgoCD to the Config Controller Kubernetes cluster."
    deps:
      - infra:bootstrap-config-controller
    cmds:
      - |
        echo "--> Getting kubectl credentials for Config Controller cluster..."
        CONFIG_CONTROLLER_CLUSTER_NAME=$(gcloud config-controller list --location "{{.GCP_REGION | default (env "GCP_REGION")}}" --project "{{.GCP_PROJECT_ID | default (env "GCP_PROJECT_ID")}}" --format="value(name)")
        gcloud config-controller get-credentials "${CONFIG_CONTROLLER_CLUSTER_NAME}" --location "{{.GCP_REGION | default (env "GCP_REGION")}}"

        echo "--> Deploying ArgoCD into the Config Controller cluster."
        helm repo add argo https://argoproj.github.io/argo-helm
        helm repo update
        helm upgrade --install argocd argo/argo-cd \
          --namespace argocd --create-namespace \
          --set server.service.type=LoadBalancer \
          --set server.ingress.enabled=true \
          --set server.ingress.hosts[0]=argocd.{{.BASE_DOMAIN | default (env "BASE_DOMAIN")}}
        echo "ArgoCD deployed. Access with: kubectl -n argocd get svc argocd-server"
        echo "Initial password can be found: kubectl get secret argocd-initial-admin-secret -n argocd -o jsonpath='{.data.password}' | base64 -d"

  app:configure-argocd-for-openlane:
    desc: "Configures ArgoCD to deploy the Openlane application to the workload cluster."
    deps:
      - app:deploy-argocd
      - infra:get-outputs # Ensure workload cluster is up and running
    cmds:
      - echo "--> This task outlines how to configure ArgoCD. It assumes ArgoCD is running and accessible."
      - echo "1. Create an ArgoCD Application pointing to the Openlane application manifests repository."
      - kubectl apply -f path/to/argocd-openlane-app.yaml"
      - |
        cat <<EOF
        apiVersion: argoproj.io/v1alpha1
        kind: Application
        metadata:
          name: openlane-app
          namespace: argocd
        spec:
          project: default
          source:
            repoURL: https://github.com/theopenlane/openlane-application.git # Replace with actual Openlane app repo
            targetRevision: HEAD
            path: deploy/kubernetes # Or where your Openlane app manifests are
          destination:
            server: https://kubernetes.default.svc  # Target the Workload GKE cluster (assuming Config Controller has access)
            namespace: openlane
          syncPolicy:
            automated:
              prune: true
              selfHeal: true
            syncOptions:
              - CreateNamespace=true
        EOF
      - echo "2. Ensure ArgoCD has the necessary `kubeconfig` or service account permissions to deploy to the *workload* GKE cluster."
      - echo "   This often involves configuring a `cluster` resource in ArgoCD or creating a ServiceAccount in the workload cluster and mapping it back to ArgoCD."
      - echo "   Simplest approach is often to have ArgoCD's service account in the Config Controller cluster get permissions to access the Workload GKE cluster based on IAM roles."
