{{- $env := .Values.env -}}
{{- if not (and $env (hasKey $env "name")) -}}
  {{- fail "'.Values.env.name' is not defined. Ensure it's set in environment-specific values (e.g., env: { name: \"dev\", capitalizedName: \"Dev\" })." -}}
{{- end -}}
{{- $envName := $env.name -}}
{{- $envCapName := $env.capitalizedName | default ($envName | upper) -}}
{{- $globalValues := .Values -}}

{{- range $projectKey, $projectInstanceConfig := .Values.projects }}

  {{- $projectType := $projectInstanceConfig.type | required (printf "Project '%s' in .Values.projects is missing the 'type' attribute." $projectKey) -}}
  {{- $projectBlueprint := get $globalValues $projectType | required (printf "Project blueprint type '%s' (for project key '%s') not found in root .Values." $projectType $projectKey) -}}

  {{- if $projectBlueprint.enabled }}
    {{- $argoAppName := printf "openlane-%s-%s" $envName ($projectKey | include "gcp-bootstrap.kebabcase") -}}
    {{- $argoProjectNameForArgoApp := printf "openlane-%s" $envName -}}

    {{- $gcpActualProjectId := include "gcp-bootstrap.gcpProjectId" (dict "projectKey" $projectKey "envName" $envName "ctx" $) -}}

    {{- $parentFolderKey := $projectInstanceConfig.parent | required (printf "Project '%s' is missing 'parent' attribute linking to a folder key." $projectKey) -}}
    {{- $parentFolderKccName := include "gcp-bootstrap.folderKccName" (dict "folderKey" $parentFolderKey) -}}

    {{- $baseProjectConf := $projectBlueprint.project | default dict -}}
    {{- $instanceDisplayName := $projectInstanceConfig.displayName | default $baseProjectConf.gcpProjectName -}}
    {{- $instanceId := $projectInstanceConfig.id | default ($baseProjectConf.id | default "") -}}

    {{- $finalApisList := $baseProjectConf.apis | default list -}}
    {{- if $projectInstanceConfig.apis -}}
      {{- $finalApisList = $projectInstanceConfig.apis -}}
    {{- end -}}

    {{- $projectValuesForBaseChart := $baseProjectConf | merge dict -}}
    {{- $_ := set $projectValuesForBaseChart "name" $gcpActualProjectId -}}
    {{- $_ := set $projectValuesForBaseChart "displayName" (printf "%s (%s)" $instanceDisplayName $envCapName) -}}
    {{- $_ := set $projectValuesForBaseChart "folderRef" (printf "folders/%s" $parentFolderKccName) -}}
    {{- $_ := set $projectValuesForBaseChart "id" $instanceId -}}
    {{- $_ := set $projectValuesForBaseChart "apis" $finalApisList -}}

    {{- $gcpProjectBaseFlags := dict -}}
    {{- if eq $projectType "sharedVpcHost" }}{{- $_ := set $gcpProjectBaseFlags "isSharedVpcHost" true -}}{{- end -}}
    {{- if eq $projectType "loggingProject" }}{{- $_ := set $gcpProjectBaseFlags "isLoggingProject" true -}}{{- end -}}
    {{- if eq $projectType "kmsProject" }}{{- $_ := set $gcpProjectBaseFlags "isKmsProject" true -}}{{- end -}}

    {{- $resourceConfigs := dict -}}
    {{- $knownResourceKeys := list "gkeCluster" "bigquery" "storage" "cloudsql" "memorystore" "dnsZone" "network" "subnets" "firewallRules" "serviceProjects" "logSinks" -}}

    {{- range $resKey := $knownResourceKeys }}
      {{- $commonConf := get $globalValues.commonAppConfig $resKey -}}
      {{- $blueprintConf := get $projectBlueprint $resKey -}}
      {{- $instanceConf := get $projectInstanceConfig $resKey -}}

      {{- $finalValue := "" -}}
      {{- $isList := false -}}

      {{- /* Determine final value and if it's a list */ -}}
      {{- if $instanceConf -}}
        {{- $finalValue = $instanceConf -}}
        {{- if eq (kindOf $instanceConf) "slice" }}{{- $isList = true -}}{{- end -}}
      {{- else if $blueprintConf -}}
        {{- $finalValue = $blueprintConf -}}
        {{- if eq (kindOf $blueprintConf) "slice" }}{{- $isList = true -}}{{- end -}}
      {{- else if $commonConf -}}
        {{- $finalValue = $commonConf -}}
        {{- if eq (kindOf $commonConf) "slice" }}{{- $isList = true -}}{{- end -}}
      {{- end -}}

      {{- if $isList -}}
        {{- /* For lists, instance overrides blueprint, which overrides common. Direct assignment. */ -}}
        {{- if $finalValue -}} {{/* Ensure it's not nil before setting */}}
          {{- $_ := set $resourceConfigs $resKey $finalValue -}}
        {{- end -}}
      {{- else -}}
        {{- /* For maps, perform a merge */ -}}
        {{- $mergedMap := dict -}}
        {{- if $commonConf | and (kindIs "map" $commonConf) }}{{- $mergedMap = merge $mergedMap $commonConf -}}{{- end -}}
        {{- if $blueprintConf | and (kindIs "map" $blueprintConf) }}{{- $mergedMap = merge $mergedMap $blueprintConf -}}{{- end -}}
        {{- if $instanceConf | and (kindIs "map" $instanceConf) }}{{- $mergedMap = merge $mergedMap $instanceConf -}}{{- end -}}
        {{- if $mergedMap -}}
          {{- $_ := set $resourceConfigs $resKey $mergedMap -}}
        {{- end -}}
      {{- end -}}
    {{- end -}}

    {{- include "gcp-bootstrap.renderArgoProjectApp" (dict
        "appName" $argoAppName
        "argoProjectName" $argoProjectNameForArgoApp
        "repoURL" $globalValues.repoURL
        "syncWave" "1"
        "projectType" $projectType 
        "projectConfig" $projectValuesForBaseChart 
        "envName" $envName
        "envCapName" $envCapName
        "globalValues" $globalValues 
        "gcpProjectBaseFlags" $gcpProjectBaseFlags 
        "resourceConfigs" $resourceConfigs 
    ) | nindent 0 }}
---
  {{- end -}}
{{- end -}}