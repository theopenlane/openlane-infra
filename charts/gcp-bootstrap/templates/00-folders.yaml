# charts/openlane-gcp-bootstrap/templates/00-folders.yaml

{{- /* Root Organizational Folder (e.g., 'openlane-org')  */ -}}
apiVersion: resourcemanager.cnrm.cloud.google.com/v1beta1
kind: Folder
metadata:
  name: {{ .Values.folders.openlaneOrg.name }}
  namespace: config-connector
  annotations:
    cnrm.cloud.google.com/organization-id: "{{ .Values.orgId }}"
    {{- if .Values.folders.openlaneOrg.id }}
    cnrm.cloud.google.com/folder-id: "{{ .Values.folders.openlaneOrg.id }}"
    {{- end }}
spec:
  displayName: {{ .Values.folders.openlaneOrg.name }}
  organizationRef: { external: "organizations/{{ .Values.orgId }}" }
---

{{- /*
  Loop through the 'environments' list from values.yaml (e.g., [{name: "dev", capitalizedName: "Dev"}, {name: "prod", capitalizedName: "Prod"}]).
  For each environment, it creates:
    - The top-level environment folder (e.g., 'openlane-org-dev')
    - Nested sub-folders for project types (e.g., 'openlane-org-app-dev', 'openlane-org-shared-infra-dev')
  This ensures the folder structure is automatically generated based on enabled environments.
*/}}
{{- range $env := .Values.environments }}
  {{- $envFolderName := printf "%s-%s" .Values.folders.openlaneOrg.name $env.name | kebabcase -}} # e.g., openlane-org-dev
  {{- $envFolderDisplayName := $env.capitalizedName -}}

  {{- /* Determine if this environment is enabled. This is crucial for only deploying
        folders for active environments (e.g., 'prod' will be disabled in values-dev.yaml).
        We check if any project type (e.g., appProject, sharedVpcHost) for this environment
        is explicitly enabled in the merged values. */}}
  {{- $isEnvEnabled := false -}}
  {{- $projectTypes := list "sharedVpcHost" "appProject" "loggingProject" "billingProject" }}
  {{- range $projectTypeKey := $projectTypes }}
    {{- $projectConfig := get $.Values $projectTypeKey -}}
    {{- if $projectConfig.enabled -}}
      {{- if contains $env.name $projectConfig.project.name -}}
        {{- $isEnvEnabled = true -}}
      {{- end -}}
    {{- end -}}
  {{- end -}}

  {{- if $isEnvEnabled }}
{{- /* Environment-Specific Top-Level Folder (e.g., 'openlane-org-dev' under 'openlane-org')  */ -}}
apiVersion: resourcemanager.cnrm.cloud.google.com/v1beta1
kind: Folder
metadata:
  name: {{ $envFolderName }} 
  namespace: config-connector
  annotations:
    cnrm.cloud.google.com/organization-id: "{{ .Values.orgId }}"
    {{- $envFolderId := get .Values.folders $env.name | default (dict "id" "") | get "id" -}}
    {{- if $envFolderId }}
    cnrm.cloud.google.com/folder-id: "{{ $envFolderId }}"
    {{- end }}
spec:
  displayName: {{ $envFolderDisplayName }}
  folderRef: { name: {{ .Values.folders.openlaneOrg.name }} }
---

{{- /* Environment-Specific Sub-Folders for Project Types (e.g., 'openlane-org-app-dev', 'openlane-org-shared-infra-dev') */ -}}
{{- $subFolderBlueprints := list "appEnv" "sharedInfraEnv" "loggingEnv" "billingEnv" }}
{{- range $subFolderKey := $subFolderBlueprints }}
  {{- $subFolderConfig := get .Values.folders $subFolderKey -}}
  {{- $subFolderName := printf "%s-%s" $envFolderName ($subFolderConfig.name | kebabcase) -}} # KCC name: openlane-org-dev-app
  {{- $subFolderDisplayName := printf "%s (%s)" ($subFolderConfig.name | title) $envFolderDisplayName -}}

  {{- /* Determine sub-folder ID from hydrated values. E.g., .Values.folders.appEnv.id might apply to 'dev' */ -}}
  {{- $subFolderId := get .Values.folders $subFolderKey | default (dict "id" "") | get "id" -}}

apiVersion: resourcemanager.cnrm.cloud.google.com/v1beta1
kind: Folder
metadata:
  name: {{ $subFolderName }}
  namespace: config-connector
  annotations:
    cnrm.cloud.google.com/organization-id: "{{ .Values.orgId }}"
    {{- if $subFolderId }}
    cnrm.cloud.google.com/folder-id: "{{ $subFolderId }}"
    {{- end }}
spec:
  displayName: {{ $subFolderDisplayName }}
  folderRef: { name: {{ $envFolderName }} }
---
{{- end -}}
  {{- end -}}
{{- end -}}