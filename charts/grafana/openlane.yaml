---
# Source: openlane-eso/charts/grafana/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: false
metadata:
  labels:
    helm.sh/chart: grafana-9.2.2
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: prod
    app.kubernetes.io/version: "12.0.1"
  name: prod-grafana
  namespace: openlane
---
# Source: openlane-eso/charts/oauth2/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: oauth2
    helm.sh/chart: oauth2-7.12.17
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: authentication-proxy
    app.kubernetes.io/part-of: oauth2
    app.kubernetes.io/name: oauth2
    app.kubernetes.io/instance: prod
    app.kubernetes.io/version: "7.9.0"
  name: prod-oauth2
  namespace: openlane
automountServiceAccountToken: true
---
# Source: openlane-eso/charts/oauth2/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: oauth2
    helm.sh/chart: oauth2-7.12.17
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: authentication-proxy
    app.kubernetes.io/part-of: oauth2
    app.kubernetes.io/name: oauth2
    app.kubernetes.io/instance: prod
    app.kubernetes.io/version: "7.9.0"
  name: prod-oauth2
  namespace: openlane
type: Opaque
data:
  cookie-secret: "WU9VUl9SQU5ET01fMzJCWVRFX1NFQ1JFVF9CQVNFNjQ="
  client-secret: "WU9VUl9HT09HTEVfT0FVVEhfQ0xJRU5UX1NFQ1JFVA=="
  client-id: "WU9VUl9HT09THEVfT0FVVEhfQ0xJRU5UX0lE"
---
# Source: openlane-eso/charts/grafana/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: prod-grafana
  namespace: openlane
  labels:
    helm.sh/chart: grafana-9.2.2
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: prod
    app.kubernetes.io/version: "12.0.1"
data:

  grafana.ini: |
    [analytics]
    check_for_updates = true
    [auth]
    disable_login_form = true
    disable_signout_menu = false
    [auth.proxy]
    auto_sign_up = true
    enabled = true
    header_name = X-Auth-Request-Email
    sync_ttl = 60
    whitelist =
    [grafana_net]
    url = https://grafana.net
    [log]
    mode = console
    [paths]
    data = /var/lib/grafana/data
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning
    [server]
    domain = grafana.theopenlane.io
    root_url = https://grafana.theopenlane.io
  datasources.yaml: |
    apiVersion: 1
    datasources:
    - access: proxy
      isDefault: true
      jsonData:
        authenticationType: gce
        defaultProject: prod-apps-project
      name: Google Cloud Monitoring
      type: stackdriver
---
# Source: openlane-eso/charts/oauth2/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: oauth2
    helm.sh/chart: oauth2-7.12.17
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: authentication-proxy
    app.kubernetes.io/part-of: oauth2
    app.kubernetes.io/name: oauth2
    app.kubernetes.io/instance: prod
    app.kubernetes.io/version: "7.9.0"
  name: prod-oauth2
  namespace: openlane
data:
  oauth2_proxy.cfg: "email_domains = [ \"*\" ]\nupstreams = [ \"file:///dev/null\" ]"
---
# Source: openlane-eso/charts/grafana/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prod-grafana
  namespace: openlane
  labels:
    helm.sh/chart: grafana-9.2.2
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: prod
    app.kubernetes.io/version: "12.0.1"
  finalizers:
    - kubernetes.io/pvc-protection
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "10Gi"
---
# Source: openlane-eso/charts/grafana/templates/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    helm.sh/chart: grafana-9.2.2
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: prod
    app.kubernetes.io/version: "12.0.1"
  name: prod-grafana-clusterrole
rules: []
---
# Source: openlane-eso/charts/grafana/templates/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: prod-grafana-clusterrolebinding
  labels:
    helm.sh/chart: grafana-9.2.2
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: prod
    app.kubernetes.io/version: "12.0.1"
subjects:
  - kind: ServiceAccount
    name: prod-grafana
    namespace: openlane
roleRef:
  kind: ClusterRole
  name: prod-grafana-clusterrole
  apiGroup: rbac.authorization.k8s.io
---
# Source: openlane-eso/charts/grafana/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: prod-grafana
  namespace: openlane
  labels:
    helm.sh/chart: grafana-9.2.2
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: prod
    app.kubernetes.io/version: "12.0.1"
rules: []
---
# Source: openlane-eso/charts/grafana/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: prod-grafana
  namespace: openlane
  labels:
    helm.sh/chart: grafana-9.2.2
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: prod
    app.kubernetes.io/version: "12.0.1"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: prod-grafana
subjects:
- kind: ServiceAccount
  name: prod-grafana
  namespace: openlane
---
# Source: openlane-eso/charts/grafana/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: prod-grafana
  namespace: openlane
  labels:
    helm.sh/chart: grafana-9.2.2
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: prod
    app.kubernetes.io/version: "12.0.1"
spec:
  type: ClusterIP
  ports:
    - name: service
      port: 80
      protocol: TCP
      targetPort: 3000
  selector:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: prod
---
# Source: openlane-eso/charts/oauth2/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: oauth2
    helm.sh/chart: oauth2-7.12.17
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: authentication-proxy
    app.kubernetes.io/part-of: oauth2
    app.kubernetes.io/name: oauth2
    app.kubernetes.io/instance: prod
    app.kubernetes.io/version: "7.9.0"
  name: prod-oauth2
  namespace: openlane
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      appProtocol: http
      name: http
    - port: 44180
      protocol: TCP
      appProtocol: http
      targetPort: metrics
      name: metrics
  selector:
    app.kubernetes.io/name: oauth2
    app.kubernetes.io/instance: prod
---
# Source: openlane-eso/charts/grafana/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prod-grafana
  namespace: openlane
  labels:
    helm.sh/chart: grafana-9.2.2
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: prod
    app.kubernetes.io/version: "12.0.1"
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/instance: prod
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        helm.sh/chart: grafana-9.2.2
        app.kubernetes.io/name: grafana
        app.kubernetes.io/instance: prod
        app.kubernetes.io/version: "12.0.1"
      annotations:
        checksum/config: 40835c8ba6b493dae5f56af6502869cf05f3448baed6dae5ff6c4c05bc39795c
        checksum/sc-dashboard-provider-config: e70bf6a851099d385178a76de9757bb0bef8299da6d8443602590e44f05fdf24
        kubectl.kubernetes.io/default-container: grafana
    spec:

      serviceAccountName: prod-grafana
      automountServiceAccountToken: true
      shareProcessNamespace: false
      securityContext:
        fsGroup: 472
        runAsGroup: 472
        runAsNonRoot: true
        runAsUser: 472
      initContainers:
        - name: init-chown-data
          image: "docker.io/library/busybox:1.31.1"
          imagePullPolicy: IfNotPresent
          securityContext:
            capabilities:
              add:
              - CHOWN
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: false
            runAsUser: 0
            seccompProfile:
              type: RuntimeDefault
          command:
            - chown
            - -R
            - 472:472
            - /var/lib/grafana
          volumeMounts:
            - name: storage
              mountPath: "/var/lib/grafana"
      enableServiceLinks: true
      containers:
        - name: grafana
          image: "docker.io/grafana/grafana:12.0.1"
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: config
              mountPath: "/etc/grafana/grafana.ini"
              subPath: grafana.ini
            - name: storage
              mountPath: "/var/lib/grafana"
            - name: config
              mountPath: "/etc/grafana/provisioning/datasources/datasources.yaml"
              subPath: "datasources.yaml"
          ports:
            - name: grafana
              containerPort: 3000
              protocol: TCP
            - name: gossip-tcp
              containerPort: 9094
              protocol: TCP
            - name: gossip-udp
              containerPort: 9094
              protocol: UDP
            - name: profiling
              containerPort: 6060
              protocol: TCP
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: grafana-admin-secret
                  key: admin-user
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-admin-secret
                  key: admin-password
            - name: GF_PATHS_DATA
              value: /var/lib/grafana/data
            - name: GF_PATHS_LOGS
              value: /var/log/grafana
            - name: GF_PATHS_PLUGINS
              value: /var/lib/grafana/plugins
            - name: GF_PATHS_PROVISIONING
              value: /etc/grafana/provisioning
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 60
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
      volumes:
        - name: config
          configMap:
            name: prod-grafana
        - name: storage
          persistentVolumeClaim:
            claimName: prod-grafana
---
# Source: openlane-eso/charts/oauth2/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: oauth2
    helm.sh/chart: oauth2-7.12.17
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: authentication-proxy
    app.kubernetes.io/part-of: oauth2
    app.kubernetes.io/name: oauth2
    app.kubernetes.io/instance: prod
    app.kubernetes.io/version: "7.9.0"
  name: prod-oauth2
  namespace: openlane
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: oauth2
      app.kubernetes.io/instance: prod
  template:
    metadata:
      annotations:
        checksum/config: c0329892592df8b1519fac51e84aee8cf879bb8e157e5a04f6556b38b5a2435b
        checksum/secret: 4750b98032e3d5e79385f9c0d1231324db4d14963ea45059ea9ca2a97ae7a4eb
        checksum/google-secret: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        checksum/redis-secret: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
      labels:
        app: oauth2
        helm.sh/chart: oauth2-7.12.17
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: authentication-proxy
        app.kubernetes.io/part-of: oauth2
        app.kubernetes.io/name: oauth2
        app.kubernetes.io/instance: prod
        app.kubernetes.io/version: "7.9.0"
    spec:
      serviceAccountName: prod-oauth2
      enableServiceLinks: true
      automountServiceAccountToken: true
      containers:
      - name: oauth2
        image: "quay.io/oauth2-proxy/oauth2-proxy:v7.9.0"
        imagePullPolicy: IfNotPresent
        args:
          - --http-address=0.0.0.0:4180
          - --https-address=0.0.0.0:4443
          - --metrics-address=0.0.0.0:44180
          - --config=/etc/oauth2_proxy/oauth2_proxy.cfg
        env:
        - name: OAUTH2_PROXY_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name:  prod-oauth2
              key: client-id
        - name: OAUTH2_PROXY_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name:  prod-oauth2
              key: client-secret
        - name: OAUTH2_PROXY_COOKIE_SECRET
          valueFrom:
            secretKeyRef:
              name:  prod-oauth2
              key: cookie-secret
        ports:
          - containerPort: 4180
            name: http
            protocol: TCP
          - containerPort: 44180
            protocol: TCP
            name: metrics
        livenessProbe:
          httpGet:
            path: /ping
            port: http
            scheme: HTTP
          initialDelaySeconds: 0
          timeoutSeconds: 1
        readinessProbe:
          httpGet:
            path: /ready
            port: http
            scheme: HTTP
          initialDelaySeconds: 0
          timeoutSeconds: 5
          successThreshold: 1
          periodSeconds: 10
        resources:
          {}
        volumeMounts:
        - mountPath: /etc/oauth2_proxy/oauth2_proxy.cfg
          name: configmain
          subPath: oauth2_proxy.cfg
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 2000
          runAsNonRoot: true
          runAsUser: 2000
          seccompProfile:
            type: RuntimeDefault
      volumes:
      - configMap:
          defaultMode: 420
          name: prod-oauth2
        name: configmain
---
# Source: openlane-eso/charts/grafana/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: prod-grafana
  namespace: openlane
  labels:
    helm.sh/chart: grafana-9.2.2
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: prod
    app.kubernetes.io/version: "12.0.1"
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
      - grafana.theopenlane.io
      secretName: grafana-tls
  rules:
    - host: "grafana.theopenlane.io"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: prod-grafana
                port:
                  number: 80
---
# Source: openlane-eso/charts/oauth2/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  labels:
    app: oauth2
    helm.sh/chart: oauth2-7.12.17
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: authentication-proxy
    app.kubernetes.io/part-of: oauth2
    app.kubernetes.io/name: oauth2
    app.kubernetes.io/instance: prod
    app.kubernetes.io/version: "7.9.0"
  name: prod-oauth2
  namespace: openlane
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  rules:
    - host: "grafana.theopenlane.io"
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: prod-oauth2
                port:
                  number: 80
  tls:
    - hosts:
      - grafana.theopenlane.io
      secretName: grafana-tls
---
# Source: openlane-eso/charts/grafana/templates/tests/test-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    helm.sh/chart: grafana-9.2.2
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: prod
    app.kubernetes.io/version: "12.0.1"
  name: prod-grafana-test
  namespace: openlane
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
---
# Source: openlane-eso/charts/grafana/templates/tests/test-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: prod-grafana-test
  namespace: openlane
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
  labels:
    helm.sh/chart: grafana-9.2.2
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: prod
    app.kubernetes.io/version: "12.0.1"
data:
  run.sh: |-
    @test "Test Health" {
      url="http://prod-grafana/api/health"

      code=$(wget --server-response --spider --timeout 90 --tries 10 ${url} 2>&1 | awk '/^  HTTP/{print $2}')
      [ "$code" == "200" ]
    }
---
# Source: openlane-eso/charts/grafana/templates/tests/test.yaml
apiVersion: v1
kind: Pod
metadata:
  name: prod-grafana-test
  labels:
    helm.sh/chart: grafana-9.2.2
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: prod
    app.kubernetes.io/version: "12.0.1"
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
  namespace: openlane
spec:
  serviceAccountName: prod-grafana-test
  containers:
    - name: prod-test
      image: "docker.io/bats/bats:v1.4.1"
      imagePullPolicy: "IfNotPresent"
      command: ["/opt/bats/bin/bats", "-t", "/tests/run.sh"]
      volumeMounts:
        - mountPath: /tests
          name: tests
          readOnly: true
  volumes:
    - name: tests
      configMap:
        name: prod-grafana-test
  restartPolicy: Never
