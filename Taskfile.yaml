version: '3'

vars:
  CHARTS:
    sh: ls -d charts/*

tasks:
  default:
    silent: true
    cmds:
      - task --list

  lint:
    desc: Lint all Helm charts
    cmds:
    - for: { var: CHARTS, as: CHART }
      cmd: helm lint {{.CHART}} -f charts/openlane/values-prod.yaml
    preconditions:
      - which helm

  template:all:
    desc: Render all Helm charts, fail if any chart fails to template
    cmds:
      - for: { var: CHARTS, as: CHART }
        cmd: |
          echo "Rendering {{.CHART}}..."
          helm dependency build "{{.CHART}}"
          helm template "{{.CHART}}" --include-crds --skip-tests --output-dir=rendered
    preconditions:
      - which helm

  lint:schema:
    desc: Validate Helm chart manifests using kubeconform and GCP schemas
    vars:
      KUBERNETES_VERSION: '1.32.3'
    cmds:
      - mkdir -p ~/.conform-cache
      - rm -f rendered/manifests.yaml
      - task: template:all
      - kubeconform -verbose -strict -output pretty -summary -kubernetes-version={{.KUBERNETES_VERSION}} -cache ~/.conform-cache -schema-location 'https://raw.githubusercontent.com/datreeio/CRDs-catalog/refs/heads/main/{{`{{.Group}}`}}/{{`{{.ResourceKind}}`}}_{{`{{.ResourceAPIVersion}}`}}.json' -schema-location 'https://json.schemastore.org/{{`{{.ResourceKind}}`}}.json' -schema-location 'https://kubernetes-schemas.pages.dev/{{`{{.Group}}`}}/{{`{{.ResourceKind}}`}}}_{{`{{.ResourceAPIVersion}}`}}.json' -schema-location 'https://raw.githubusercontent.com/GoogleCloudPlatform/k8s-config-connector/refs/heads/master/crds/{{`{{.Group}}`}}_{{`{{.ResourceAPIVersion}}`}}_{{`{{.ResourceKind}}`}}.yaml' -schema-location 'https://raw.githubusercontent.com/yannh/kubernetes-json-schema/refs/heads/master/v{{.KUBERNETES_VERSION}}/{{`{{.ResourceKind}}`}}.json' -schema-location default rendered/manifests.yaml
    preconditions:
      - which helm
      - which kubeconform

  package:
    desc: Package all charts
    cmds:
      - mkdir -p packaged
      - for: { var: CHARTS, as: CHART }
        cmd: helm package {{.CHART}} -d packaged
    preconditions:
      - which helm

  dependency:
    desc: Install dependencies
    cmds:
      - for: { var: CHARTS, as: CHART }
        cmd: helm dependency update {{.CHART}}
    preconditions:
      - which helm

  minikube:
    desc: Start minikube
    cmds:
      - minikube start --addons=ingress
    silent: true
    status:
      - test $(minikube status | grep -i running | wc -l) -eq 3

  minikube:down:
    desc: Bring down minikube
    cmds:
      - minikube stop
    silent: true
    status:
      - test $(minikube status | grep -i stopped | wc -l) -eq 4

  minikube:purge:
    desc: Run minikube delete
    cmds:
      - minikube delete
    silent: true

  docker:run:
    desc: Run task inside Docker container with preinstalled CLI tools
    cmds:
      - docker build -t openlane/chart-tools .
      - docker run --rm -v $PWD:/workspace -w /workspace openlane/chart-tools

  lint:ct:
    desc: Run chart-testing (ct) lint against all Helm charts
    cmds:
      - ct lint --all --chart-dirs charts --validate-maintainers=false
    preconditions:
      - which ct

  lint:fix:
    desc: Fix lint issues using yamllint with custom config
    cmds:
      - yamllint -c configs/lintconf.yaml charts/
    preconditions:
      - which yamllint

  helmdocstemplate:
    desc: Add template helm docs to all charts
    cmds:
      - for: { var: CHARTS, as: CHART }
        cmd: cp scripts/templates/HELM.md.gotmpl {{.CHART}}/HELM.md.gotmpl

  docs:
    silent: true
    desc: Generate documentation for all charts
    cmds:
      - for: { var: CHARTS, as: CHART }
        cmd: |
          helm-docs --chart-search-root {{.CHART}} --output-file=HELM.md --template-files=HELM.md.gotmpl --skip-version-footer --sort-values-order=file
    preconditions:
      - which helm-docs

  precommit-full:
    desc: Lint the project against all files
    cmds:
      - pre-commit install && pre-commit install-hooks
      - pre-commit autoupdate
      - pre-commit run --show-diff-on-failure --color=always --all-files

  brew-install:
    desc: Install workstation dependencies with Brew
    cmds:
      - task: update-brew
      - echo "Installing {{.DEPS}} via homebrew..."
      - brew install {{.DEPS}} {{.CLI_ARGS}}
      - echo "Installed {{.DEPS}} via homebrew!"
    deps:
      - task: brew-installed
    status:
      - '[ -f $(brew --prefix)/bin/{{.DEPS}} ]'
    vars:
      DEPS: >-
        helm kubectl kubeconform kube-score helm-docs chart-testing yamllint #magic___^_^___line

  brew-installed:
    silent: true
    desc: check if Homebrew is installed
    cmds:
      - '[ -x "$(command -v brew)" ] || (echo "Homebrew is not installed, please install it from https://brew.sh" && exit 1)'

  update-brew:
    desc: Update Homebrew and upgrade all packages
    cmds:
      - brew update && brew upgrade && brew cleanup || true
